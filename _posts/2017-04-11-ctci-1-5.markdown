---
layout: post
title: "CTCI Questions 1.5 (Array and String)"
date: 2017-04-11 21:53:00
author: SungHoon Ko
categories: CTCI
tags: ctci algorithm ch1
---

#### 1.5 Implement a method to perfrom basic string compression using the counts of repeated characters. For example, the string 'aabcccccaaa' would become 'a2b1c5a3'. If the "compressed" string would not become smaller than the original string, your method should return the original string.

#### 1.5 같은 문자가 연속으로 반복될 경우, 그 횟수를 사용해 문자열을 압축하는 메서드를 구현하라. 가령 압축해야 할 문자열이 'aabcccccaaa' 라면 'a2b1c5a3' 과 같이 압축되어야 한다. 압축 결과로 만들어지는 문자열이 원래 문자열 보다 짧아지지 않는 경우, 이 메서드는 원래 문자열을 그대로 반환해야 한다.

---

Max OSX 의 CLion 에서 이상한 증상이 발견되었다.
함수에서 동적할당을 받은 메모리를 함수 파라미터의 포인터를 통해서 넘겨 주었는데,
Caller 에서는 계속 nullptr 로 셋팅된다.

무언가 osx 에서 사용하는 함수 호출 규칙이 다른거 같다. 조금더 테스를 해 보아야 겠다.
일단 압축된 결과 문자열을 포인터 파라미터로 전달하지 않고 함수 리턴값으로 전달 하도록 적용했다.

물론 Callee 에서 함수 파라미터로 결과를 전달하나, 리턴값으로 전달하나 둘다 동적으로 할당 받은 메모리의 해제 책임은 Caller 에게 있다. 좋은 방법이 아니란것은 알고 있지만, 나름대로 코드를 이해하기 쉽도록 작성하기 위해서 이런 방식을 선택 했다. stl 의 string 이나 vector 를 사용해서 복사를 하던지, 아니면 비지역 객체를 사용해도 될 것이다.

문제 풀이중에 한가지 제한 사항을 만들었는데, 연속된 문자가 9개 이하일것이라는 가정을 하고 작성하였다.

전체 구현 내용은 아래와 같다.
시간이 1시간 정도 걸렸다.

* 전체 구현 부

{% highlight C++ %}
#include <iostream>
#include <string>
using namespace std;

// ex) the string 'aabcccccaaa' would become 'a2b1c5a3'

// 문자열내에서 문자가 연속으로 반복하는 횟수를 조사하여 압축된 전체 문자열의 길이를 계산
// 전략 : 연속된 문자와 그렇지 않은 문자 모두 2 바이트를 가지게 되므로 (a1, b1 ...) 여기에 착안해서 길이를 계산
// 연속된 문자가 최대 9 개 (한자리수) 이하라고 가정한다.
int count_repeated_char(const char* str, int len)
{
    int compressed_len = 0;
    char prev_char = 0;

    for (int i = 0; i < len; i++) {
        if (str[i] != prev_char && str[i] != '\0') {
            compressed_len += 2;
            prev_char = str[i];
        }
    }

    return compressed_len + 1;
}

// 압축된 결과를 저장할 버퍼도 Caller 에서 제공되어야 하며, 본 알고리즘에서는 이와 관려된 예외처리는 하지 않는다.
// 연속된 문자가 최대 9 개 (한자리수) 이하라고 가정한다.
// Caller 에서 buff 메모리를 직접 해제 해 주어야 한다.
void compress(const char* src_str, int src_len, char* buff, int& buff_len)
{
    char prev_char = 0;
    int buff_index = 0;

    for (int i = 0; i < src_len; i++) {

        if (src_str[i] != prev_char && src_str[i] != '\0') {

            buff[buff_index] = src_str[i];
            buff[buff_index + 1] = '1';
            prev_char = src_str[i];

            buff_index += 2;

        } else if (src_str[i] == prev_char) {

            buff[buff_index - 1] += 1;
        }
    }

    buff[buff_index] = '\0';
}

const char* do_compress(const char* str, int len)
{
    int buff_len = count_repeated_char(str, len);

    char* buff;

    if (buff_len >= len) {
        buff = new char[len];
        memcpy(buff, str, sizeof(char) * len);

    } else {
        buff = new char[buff_len];
        compress(str, len, buff, buff_len);
    }

    return buff;
}

int main() {

    string input_str;
    cout << "Input string : ";
    getline(cin, input_str);

    const char* compressed_str = do_compress(input_str.c_str(), input_str.length() + 1);
    cout << "Result : " << compressed_str << endl;

    delete[] compressed_str;

    return 0;
}
{% endhighlight %}

* 실행결과

{% highlight Markdown %}
Input string : aabcccccaaa
Result : a2b1c5a3
{% endhighlight %}
