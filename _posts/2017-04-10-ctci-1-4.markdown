---
layout: post
title: "CTCI Questions 1.4 (Array and String)"
date: 2017-04-10 19:56:00
author: SungHoon Ko
categories: CTCI
tags: ctci algorithm ch1
---

### 1.4 Write a method to replace all spaces in a string '%20'. You may assume that the string has sufficient space at the end of the string to hold the additional characters, and that you are given the "true" length of the string. (Note: if implementing in Java, please use a character array so that you can perform this operation in place.)

* Example
  - Input: "Mr John Smith    ", 13
  - Output: "Mr%20John%20Smith"

#### 1.4 주어진 문자열 내의 모든 공백을 '%20' 으로 바꾸는 메서드를 작성하라. 문자열 끝에 추가로 필요한 문자들을 더할 수 있는 충분한 공간이 있다고 가정하라. 그리고 공백을 포함하는 문자열의 길이도 함께 주어진다고 가정하라. (주의: Java 로 구현한다면, 문자 배열을 사용하여 필요한 연산을 각 문제에 바로 적용할 수 있도록 하라.)

* 예
  - 입력 : `"Mr John Smith    ", 13`
  - 출력 : `"Mr%20John%20Smith"`

---------------

문제가 살짝 헛갈렸다.

문자열의 길이에 대한 기준이 충분한 공간을 포함한 길이로 착각하여, 입력으로 전체 버퍼의 길이를 입력으로 받았다.
그리고 문제의 핵심이 공백을 정해진 문자로 치환하는 것이 핵심이므로, 입력 형식은 문자열과 길이를 분리해서 입력 받도록 구현 했다.

수학도 그렇지만 문제를 잘 읽어야 된다. 한글도 이렇게 어려운데 영어 알고리즘 문제라니...
그래도 훈련을 계속하다보면 효과가 있지 않겠나???

* 주어진 문자열의 모든 공백을 '%20' 문자로 치환하는 함수 구현
{% highlight C++ %}
// 문자열의 모든 공백을 '%20'문자로 변경한다
// 입력문자열은 ASCII Code 이다.
// 입력 : "Mr John Smith    ", 13
// 출력 : "Mr%20John%20Smith"
void replace_space(char* str, int len)
{
    // 전략 : 주어진 문자열을 처음부터 검색하면서 공백문자가 발견되면 이후 문자열들을 뒤로 옮긴다.
    // 문자열의 공간은 대체되는 문자를 포함한 충분한 공간이 있다고 가정한다.
    // 그래서 문자열의 가능한 공간 계산을 위한 검사 처리는 제외한다.
    const char replace_str[3] = {'%', '2', '0'};

    int index = 0;
    while (index < len) {
        // 스페이스문자인가?
        if (str[index] == 32) {
            // 대체할 문자 '%20' 크기만큼 문자열을 뒤로 밀어준다. 이때 널문자도 고려되어야 한다.

            // 공백문자르 고려하여 인덱스 고려
            int stop_index = index + 1;

            // 문자열을 뒤로 밀어서 공간 확보
            int offset = 2;
            for (int i = len - 1; i > stop_index; i--) {
                str[i] = str[i - offset];
            }

            // 확보된 공간에 대체 문자열 대입
            memcpy(str + index, replace_str, sizeof(char) * 3);
        }

        ++index;
    }
}
{% endhighlight %}


* 문자열 내의 공백의 갯수를 카운트하는 함수 구현
{% highlight C++ %}
// 문자열내의 공백문자 갯수 확인
int count_space_char(const char* str, int len)
{
    int count = 0;
    for (int i = 0; i < len; i++) {
        if (str[i] == 32)
            count++;
    }

    return count;
}

{% endhighlight %}

* main 함수 구현
{% highlight C++ %}
int main() {

    string input_str;
    cout << "Input String : ";
    getline(cin, input_str);

    int str_len;
    cout << "Buffer length : ";
    cin >> str_len;

    // 입력받은 문자열내에 공백 문자가 몇개 있는지 조사 후 확장될 문자만큼 배열을 할당해야됨
    // 문제 내용 중 '문자열 끝에 추가로 필요한 문자들을 더 할 수 있는 충분한 공간이 있다고 가정'
    // string 과 vector 에 이미 모두 있지만... 훈련이니깐...
    int space_count = count_space_char(input_str.c_str(), str_len);
    str_len += (space_count * 2 + 1);

    char array_str[str_len];
    memset(array_str, 0, sizeof(array_str));

    memcpy(array_str, input_str.c_str(), input_str.length());

    replace_space(array_str, str_len);

    cout << endl;
    cout << "Result : " << array_str;

    cout << endl;

    return 0;
}
{% endhighlight %}
